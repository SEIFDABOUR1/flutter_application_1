/* لو إنت بتتعلم برمجة بلغة Dart وخاصة لو شغال بـ Flutter لازم تبقى فاهم شوية قواعد مهمة اسمها SOLID principles. دي عبارة عن 5 مبادئ كدا لو مشيت عليهم، الكود بتاعك هيبقى أنضف وأسهل في التعديل
.
S-يشير ال Single Responsibility Principle
يعني: "كل كلاس يعمل حاجة واحدة بس
مثال==> لو عندي كلاس اسمه User، المفروض إنه مسؤول عن بيانات اليوزر بس. ما ينفعش يحوش فيه كود بيسجّل الدخول ولا يطبع تقارير.

. O - Open/Closed Principle
الكود هنا مفتوح للإضافة، مقفول للتعديل
يعني لما تحب تضيف ميزة جديدة، متعدّلش في الكود القديم – زوّد كود جديد.

L - Liskov Substitution Principle
هنا أي كلاس ابن لازم يشتغل مكان الأب من غير ما يبوز الدنيا
يعني لو عندك Bird وعملت كلاس اسمه Penguin يرث منها، ميصحش تخلي Penguin.fly() تشتغل، وهو أصلاً ميعرفش يطير!

I - Interface Segregation Principle
 يعني ما ترغمش الكلاسات تستخدم حاجات مش محتاجاها
يعني ما تعملش إنترفيس كبير قوي وتخلّي الكلاسات تورث منه رغم إنها مش محتاجة كل الفانكشنز.

D - Dependency Inversion Principle
يعني: اعتمد على abstraction مش على الكلاسات الحقيقية

يعني لما كلاس يحتاج خدمة (زي AuthService) ما يخليش الكلاس يتعامل مع AuthService مباشرة. لأ، خليه يتعامل مع إنترفيس، وانت تدي له النسخة اللي انت عايزها.

الخلاصة:
لو مشيت على الـ SOLID principles:
الكود بتاعك هيبقى أنضف
سهل تطوره بعدين
سهل تختبره
وسهل تشتغل عليه في تيم

 */